# -*- coding: utf-8 -*-
"""Stock_Prediction-and-Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GJo049d4MmJv9IFe7WT2Fr3z56DfVOJj

## Gathering Yahoo Finance Dataset
"""

!pip install yfinance

"""## Importing necessary modules"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

from keras.models import Sequential
from keras.layers import Dense, LSTM

import warnings
warnings.filterwarnings('ignore')

"""## Obtaining Historical Data of "S&P BSE SENSEX" Stock """

from pandas_datareader import data as pdr
import yfinance as yf

yf.pdr_override()

df = pdr.get_data_yahoo("%5EBSESN", start="2011-01-01", end="2021-08-03")

#print(df.head())

#print(df.shape)

"""## Data Visualization

"""

""" plt.figure(1,(10,5))
graph=plt.plot(df['Close'])
plt.xlabel("Year")
plt.ylabel("Closing price ($)")
plt.title("Stock Graph of S&P BSE SENSEX")
 """
"""## Data Preprocessing"""

data=df.filter(['Close'])
df_new=data.values
#print(df_new)

from sklearn.preprocessing import MinMaxScaler

scaler=MinMaxScaler(feature_range=(0,1),copy=True)
scaled_data=scaler.fit_transform(df_new)
#print(scaled_data)

"""## Dividing dataset into train and test data"""

train_len=math.ceil(len(df_new)*0.8)
test_len=len(data)-train_len
#print("train_len=",train_len)
#print("test_len=",test_len)

train_data = scaled_data[0:train_len,:]

#print(train_data.shape)

test_data=scaled_data[train_len-60:,:]

#print(test_data.shape)

"""## Training model for 60 days and predicting for 61st day"""

X_train = []
y_train = []
for i in range(60,len(train_data)):                 
  X_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  """ if i<=60:
    print("X_train",X_train)
    print("y_train",y_train)
    print() """

#print(type(X_train))

#print(type(y_train))

X_train = np.array(X_train)     
y_train = np.array(y_train)
X_train=np.reshape(X_train,(X_train.shape[0],X_train.shape[1],1))
#print(X_train.shape)

X_test=[]
y_test=df_new[train_len:,:]
for i in range(60,len(test_data)):
  X_test.append(test_data[i-60:i,0])

#print(type(X_test))

#print(type(y_test))

X_test=np.array(X_test)
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
#print(X_test.shape)

"""## LSTM Model """

model=Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X_train.shape[1],1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#print(model.summary())

model.compile(optimizer='adam',loss='mean_squared_error')

model.fit(X_train,y_train,batch_size=1,epochs=5)

"""## Predictions"""

y_pred=model.predict(X_test)
y_pred=scaler.inverse_transform(y_pred)

""" train=data[:train_len]
validation=data[train_len:]
validation['Predictions']=y_pred
plt.figure(figsize=(15,5))
plt.xlabel("DATE")
plt.ylabel("Closing Price($)")
plt.plot(df['Close'])
plt.plot(validation[['Close','Predictions']])
plt.legend(['Train','Valid','Predictions'])
plt.show() """

"""# Testing our model to find closing price for "4th August 2021""""

last_60_days=data[-60:].values
last_60_days_scaled=scaler.transform(last_60_days)
X_test=[]
X_test.append(last_60_days_scaled)
X_test=np.array(X_test)
X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
pred_price=model.predict(X_test)
pred_price=scaler.inverse_transform(pred_price)
print(pred_price)

from pandas_datareader import data as pdr
import yfinance as yf

yf.pdr_override()

sample = pdr.get_data_yahoo("%5EBSESN", start="2021-08-04", end="2021-08-05")

print(sample)

"""# Sentiment Analysis

## Gathering dataset
"""

df_sentiment = pd.read_csv("/content/drive/MyDrive/india-news-headlines.csv")

#print(df_sentiment.head())

"""## Importing necessary modules"""

from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
nltk.downloader.download('vader_lexicon')

"""## Predicting if a news headline is positive , negative or neutral"""

vader = SentimentIntensityAnalyzer()

sentiment = df_sentiment['headline_text'].apply(vader.polarity_scores).tolist()
sentiment_score = pd.DataFrame(sentiment)

df_sentiment = df_sentiment.join(sentiment_score, rsuffix='_right')


print(df_sentiment.head())